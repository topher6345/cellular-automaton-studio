export interface ITypedWorker<Input, Output> {
    terminate: () => void;
    onMessage: (output: Output) => void;
    postMessage: (workerMessage: Input, transfer?: Transferable[]) => void;
}
/**
 * Props that will be passed to your worker function
 */
export interface WorkerFunctionProps<Input, Output, State = any> {
    input: Input;
    callback: (result: Output, transfer?: Transferable[]) => void;
    getState: () => State | undefined;
    setState: (newState: State) => void;
}
/**
 * Do not use this directly. Prefer importing `createWorker`
 */
export declare class TypedWorker<Input, Output, State = any> implements ITypedWorker<Input, Output> {
    onMessage: (_: Output) => void;
    private _nativeWorker;
    constructor(workerFunction: (props: WorkerFunctionProps<Input, Output, State>) => void, onMessage?: (_: Output) => void, importScriptsUris?: string[], onError?: (error: ErrorEvent) => void);
    /**
     * Post message to worker for processing
     * @param workerMessage message to send to worker
     */
    postMessage(workerMessage: Input, transfer?: Transferable[]): void;
    terminate(): void;
}
